// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma enums
enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELED
  DONE
}

// Prisma models
model User {
  id String @id @default(uuid())

  admin   Admin?
  patient Patient?
  doctor  Doctor?

  email     String   @unique()
  hash      String
  role      Role     @default(PATIENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Admin {
  id String @id @default(uuid())

  appointment Appointment[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  registrationNumber String   @unique
  fullName           String

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("admins")
}

model Doctor {
  id String @id @default(uuid())

  appointment Appointment[]

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  crm          String   @unique
  fullName     String
  specialities String[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("doctors")
}

model Patient {
  id String @id @default(uuid())

  address     Address?
  appointment Appointment[]

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  cpf       String    @unique
  fullName  String
  phone     String?
  birthDate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("patients")
}

model Address {
  id String @id @default(uuid())

  patientId String  @unique
  patient   Patient @relation(fields: [patientId], references: [id])

  zipCode    String
  street     String
  number     String?
  complement String?
  district   String?
  city       String
  state      String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("addresses")
}

model Appointment {
  id String @id @default(uuid())

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  adminId String
  admin   Admin @relation(fields: [adminId], references: [id])

  dateTime  DateTime
  reason    String?
  status    AppointmentStatus @default(SCHEDULED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}
